{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"en",
				"enumerate-interval"
			],
			[
				"co",
				"comb"
			],
			[
				"re",
				"reverse"
			],
			[
				"pre",
				"pred-to"
			],
			[
				"e",
				"enumerate-interval"
			],
			[
				"s",
				"symbols-len"
			],
			[
				"log",
				"log2"
			],
			[
				"ly",
				"lyrix-tree"
			],
			[
				"tre",
				"tree2"
			],
			[
				"de",
				"decode"
			],
			[
				"le",
				"leaves"
			],
			[
				"mak",
				"make-code-tree"
			],
			[
				"null",
				"null?"
			],
			[
				"make",
				"make-leaf-set"
			],
			[
				"sym",
				"symbols"
			],
			[
				"end",
				"encode-symbol"
			],
			[
				"ri",
				"right-branch"
			],
			[
				"tree",
				"tree"
			],
			[
				"lef",
				"left-branch"
			],
			[
				"con",
				"cond	cond"
			],
			[
				"symb",
				"symbol"
			],
			[
				"wei",
				"weight"
			],
			[
				"rit",
				"right-branch"
			],
			[
				"rig",
				"right-branch"
			],
			[
				"sy",
				"symbols"
			],
			[
				"ma",
				"make-code-tree"
			],
			[
				"dec",
				"decode"
			],
			[
				"ca",
				"cadr"
			],
			[
				"pa",
				"pairs"
			],
			[
				"we",
				"weight"
			],
			[
				"left",
				"left-branch"
			],
			[
				"deco",
				"decode-1"
			],
			[
				"righ",
				"right-result"
			],
			[
				"f",
				"fill-set"
			],
			[
				"a",
				"adjoint-set"
			],
			[
				"tai",
				"tail1"
			],
			[
				"tail",
				"tail2"
			],
			[
				"i",
				"intersection-set"
			],
			[
				"h",
				"head1"
			],
			[
				"hea",
				"head2"
			],
			[
				"head",
				"head1"
			],
			[
				"uni",
				"union-set"
			],
			[
				"c",
				"car"
			],
			[
				"se",
				"set2"
			],
			[
				"set",
				"set1"
			],
			[
				"map",
				"map-inner"
			],
			[
				"eq",
				"equal?"
			],
			[
				"be",
				"before"
			],
			[
				"make-",
				"make-sum"
			],
			[
				"no",
				"not-number?"
			],
			[
				"n",
				"number?"
			],
			[
				"op",
				"operands"
			],
			[
				"fo",
				"fold-right"
			],
			[
				"it",
				"initial"
			],
			[
				"res",
				"rest"
			],
			[
				"ver",
				"verticalize"
			],
			[
				"m",
				"matrix-vector"
			],
			[
				"ac",
				"accumulate-n"
			],
			[
				"bra",
				"branch6"
			],
			[
				"b",
				"branch-left"
			],
			[
				"mo",
				"mobiles"
			],
			[
				"ba",
				"branch-structure"
			],
			[
				"nu",
				"null?"
			],
			[
				"ite",
				"items"
			],
			[
				"fri",
				"list-to-fringe"
			],
			[
				"li",
				"list-to-fringe"
			],
			[
				"list",
				"list1"
			],
			[
				"pri",
				"println-in"
			],
			[
				"va",
				"vars"
			],
			[
				"pr",
				"print-rec"
			],
			[
				"d",
				"display"
			],
			[
				"first",
				"first-el"
			],
			[
				"abs",
				"absd"
			],
			[
				"o",
				"one-third"
			],
			[
				"repe",
				"repeat-inc"
			],
			[
				"new",
				"newton-method"
			],
			[
				"po",
				"positive"
			],
			[
				"ex",
				"expmod"
			],
			[
				"p",
				"println"
			],
			[
				"defi",
				"define"
			],
			[
				"fi",
				"fib-iter"
			],
			[
				"if",
				"ifmain	if __name__ == '__main__'"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#lang scheme \n\n; for testing \n\n(define (container)\n    (define hash (make-hash))\n\n    (define (put op type item)\n        (hash-set! hash (cons op type) item)\n    )\n\n    (define (get op type)\n        (let\n            ((key (cons op type)))\n            (if (hash-has-key? hash key)\n                (hash-ref hash key)\n                false\n            )\n        )\n    )\n\n    (lambda (name) \n        (cond\n            ((eq? name 'get) get)\n            ((eq? name 'put) put)\n            ((eq? name 'hash) hash)\n        )\n    )\n)\n\n(define storage (container))\n\n(define put (storage 'put))\n(define get (storage 'get))\n\n;\n; Usual numbers\n;\n\n(define (install-scheme-number-package)\n    (define (tag x)\n        (attach-tag 'scheme-number x)\n    )\n\n    (put 'add '(scheme-number scheme-number)\n        (lambda (x y) (tag (+ x y)))\n    )\n\n    (put 'sub '(scheme-number scheme-number)\n        (lambda (x y) (tag (- x y)))\n    )\n\n    (put 'mul '(scheme-number scheme-number)\n        (lambda (x y) (tag (* x y)))\n    )\n\n    (put 'div '(scheme-number scheme-number)\n        (lambda (x y) (tag (/ x y)))\n    )\n\n    (put 'make 'scheme-number\n        (lambda (x) (tag x))\n    )\n\n    ; 2.79\n    (put 'equ? '(scheme-number scheme-number)\n        (lambda (a b) (= a b))\n    )\n\n    ; 2.80\n    (put 'zero? '(scheme-number)\n        (lambda (a) (= a 0))\n    )\n\n    'done\n)\n\n(define (make-scheme-number n)\n    ((get 'make 'scheme-number) n)\n)\n\n\n;\n; rational\n;\n\n(define (install-rational-package)\n    ;; internal procedures\n    (define (numer x) \n        (car x)\n    )\n\n    (define (denom x) \n        (cdr x)\n    )\n\n    (define (make-rat n d)\n        (let \n            ((g (gcd n d)))\n            (cons (/ n g) (/ d g))\n        )\n    )\n\n    (define (add-rat x y)\n        (make-rat (+ (* (numer x) (denom y))\n                     (* (numer y) (denom x)))\n                  (* (denom x) (denom y)))\n    )\n\n    (define (sub-rat x y)\n        (make-rat (- (* (numer x) (denom y))\n                     (* (numer y) (denom x)))\n                  (* (denom x) (denom y)))\n    )\n\n    (define (mul-rat x y)\n        (make-rat (* (numer x) (numer y))\n                  (* (denom x) (denom y)))\n    )\n\n    (define (div-rat x y)\n        (make-rat (* (numer x) (denom y))\n                  (* (denom x) (numer y)))\n    )\n\n    ;; interface to rest of the system\n    (define (tag x) \n        (attach-tag 'rational x)\n    )\n\n    (put 'add '(rational rational)\n        (lambda (x y) (tag (add-rat x y)))\n    )\n\n    (put 'sub '(rational rational)\n        (lambda (x y) (tag (sub-rat x y)))\n    )\n\n    (put 'mul '(rational rational)\n        (lambda (x y) (tag (mul-rat x y)))\n    )\n\n    (put 'div '(rational rational)\n        (lambda (x y) (tag (div-rat x y)))\n    )\n\n    (put 'make 'rational\n        (lambda (n d) (tag (make-rat n d)))\n    )\n\n    ; 2.79\n    (put 'equ? '(rational rational)\n        (lambda (r1 r2) (and (= (numer r1) (numer r2)) (= (denom r1) (denom r2))))\n    )\n\n    ; 2.80\n    (put 'zero? '(rational)\n        (lambda (a) (= (numer a) 0))\n    )\n\n    'done\n)\n\n(define (make-rational n d)\n    ((get 'make 'rational) n d)\n)\n\n;\n; Complex\n;\n\n(define (square x)\n    (* x x)\n)\n\n(define (install-rectangular-package)\n    (define RECTANGULAR 'rectangular)\n\n    (define (real-part z)\n        (car z)\n    )\n\n    (define (imag-part z)\n        (cdr z)\n    )\n\n    (define (magnitude z)\n        (sqrt (+ (square (real-part z))\n                 (square (imag-part z))))\n    )\n\n    (define (angle z)\n        (atan (imag-part z) (real-part z))\n    )\n\n    (define (make-from-real-imag x y)\n        (cons x y)\n    )\n\n    (define (make-from-mag-ang r a)\n        (cons (* r (cos a)) (* r (sin a)))\n    ) \n\n    ;; interface\n\n    (define (tag x)\n        (attach-tag RECTANGULAR x)\n    )\n\n    (put 'real-part RECTANGULAR real-part)\n    (put 'imag-part RECTANGULAR imag-part)\n    (put 'magnitude RECTANGULAR magnitude)\n    (put 'angle RECTANGULAR angle)\n\n    (put 'make-from-real-imag RECTANGULAR \n        (lambda (x y) (tag (make-from-real-imag x y)))\n    )\n\n    (put 'make-from-mag-ang RECTANGULAR \n        (lambda (r a) (tag (make-from-mag-ang r a)))\n    )\n\n    'done\n)\n\n\n(define (install-polar-package)\n    (define POLAR 'polar)\n\n    (define (real-part z)\n        (* (magnitude z) (cos (angle z)))\n    )\n\n    (define (imag-part z)\n        (* (magnitude z) (sin (angle z)))\n    )\n\n    (define (magnitude z)\n        (car z)\n    )\n\n    (define (angle z)\n        (cdr z)\n    )\n\n    (define (make-from-real-imag x y)\n        (cons \n            (sqrt (+ (square x) (square y)))\n            (atan y x)\n        )\n    )\n\n    (define (make-from-mag-ang r a)\n        (cons r a)\n    )\n\n    ;; interface\n\n    (define (tag x)\n        (attach-tag POLAR x)\n    )\n\n    (put 'real-part POLAR real-part)\n    (put 'imag-part POLAR imag-part)\n    (put 'magnitude POLAR magnitude)\n    (put 'angle POLAR angle)\n\n    (put 'make-from-real-imag POLAR \n        (lambda (x y) (tag (make-from-real-imag x y)))\n    )\n\n    (put 'make-from-mag-ang POLAR \n        (lambda (r a) (tag (make-from-mag-ang r a)))\n    )\n\n    'done\n)\n\n(define (install-complex-package)\n    ;; imported procedures from rectangular and polar packages\n    (define (make-from-real-imag x y)\n        ((get 'make-from-real-imag 'rectangular) x y)\n    )\n    \n    (define (make-from-mag-ang r a)\n        ((get 'make-from-mag-ang 'polar) r a)\n    )\n\n    (define (operation name z)\n        ((get name (type-tag z)) (contents z))\n    )\n\n    (define (real-part z)\n        (operation 'real-part z)\n    )\n\n    (define (imag-part z)\n        (operation 'imag-part z)\n    )\n\n    (define (magnitude z)\n        (operation 'magnitude z)\n    )\n\n    (define (angle z)\n        (operation 'angle z)\n    )\n\n    ;; internal procedures\n    (define (add-complex z1 z2)\n        (make-from-real-imag (+ (real-part z1) (real-part z2))\n                             (+ (imag-part z1) (imag-part z2)))\n    )\n\n    (define (sub-complex z1 z2)\n        (make-from-real-imag (- (real-part z1) (real-part z2))\n                             (- (imag-part z1) (imag-part z2)))\n    )\n\n    (define (mul-complex z1 z2)\n        (make-from-mag-ang (* (magnitude z1) (magnitude z2))\n                           (+ (angle z1) (angle z2)))\n    )\n    \n    (define (div-complex z1 z2)\n        (make-from-mag-ang (/ (magnitude z1) (magnitude z2))\n                           (- (angle z1) (angle z2)))\n    )\n\n    ;; interface to rest of the system\n    (define (tag z) (attach-tag 'complex z))\n\n    ; 2.77\n    (put 'real-part '(complex) real-part)\n    (put 'imag-part '(complex) imag-part)\n    (put 'magnitude '(complex) magnitude)\n    (put 'angle '(complex) angle)\n\n    (put 'add '(complex complex)\n        (lambda (z1 z2) (tag (add-complex z1 z2)))\n    )\n\n    (put 'sub '(complex complex)\n        (lambda (z1 z2) (tag (sub-complex z1 z2)))\n    )\n\n    (put 'mul '(complex complex)\n        (lambda (z1 z2) (tag (mul-complex z1 z2)))\n    )\n\n    (put 'div '(complex complex)\n        (lambda (z1 z2) (tag (div-complex z1 z2)))\n    )\n\n    (put 'make-from-real-imag 'complex\n        (lambda (x y) (tag (make-from-real-imag x y)))\n    )\n\n    (put 'make-from-mag-ang 'complex\n        (lambda (r a) (tag (make-from-mag-ang r a)))\n    )\n\n    ; 2.79\n    (put 'equ? '(complex complex)\n        (lambda (z1 z2) (and (= (real-part z1) (real-part z2)) (= (imag-part z1) (imag-part z2))))\n    )\n\n    ; 2.80\n    (put 'zero? '(complex)\n        (lambda (a) (and (= (real-part a) 0) (= (imag-part a) 0)))\n    )\n\n    'done\n)\n\n(define (make-complex-from-real-imag x y)\n    ((get 'make-from-real-imag 'complex) x y)\n)\n\n(define (make-complex-from-mag-ang r a)\n    ((get 'make-from-mag-ang 'complex) r a)\n)\n\n\n(define storage-coercion (container))\n\n(define put-coercion (storage-coercion 'put))\n(define get-coercion (storage-coercion 'get))\n\n\n;\n; Generic\n;\n\n(define (attach-tag type-tag contents)\n    (cons type-tag contents)\n)\n\n(define (type-tag datum)\n    (if (pair? datum)\n        (car datum)\n        (error \"Bad tagged datum -- type-tag\" datum)\n    )\n)\n\n(define (contents datum)\n    (if (pair? datum)\n        (cdr datum)\n        (error \"Bad tagged datum -- contents\" datum)\n    )\n)\n\n(define (apply-generic op . args)\n    (let \n        ((type-tags (map type-tag args)))\n        (let \n            ((proc (get op type-tags)))\n            \n            (if proc\n                (apply proc (map contents args))\n                (if (= (length args) 2)\n                    (let \n                        ((type1 (car type-tags))\n                         (type2 (cadr type-tags))\n                         (a1 (car args))\n                         (a2 (cadr args)))\n\n                        (let \n                            ((t1->t2 (get-coercion type1 type2))\n                             (t2->t1 (get-coercion type2 type1)))\n\n                            (cond \n                                (t1->t2\n                                    (apply-generic op (t1->t2 a1) a2))\n                                (t2->t1\n                                    (apply-generic op a1 (t2->t1 a2)))\n                                (else\n                                    (error \"No method for these types\" (list op type-tags)))\n                            )\n                        )\n                    )\n                    (error \"No method for these types\" (list op type-tags)) \n                )\n            )\n        )\n    )\n)\n\n\n(define (add x y) \n    (apply-generic 'add x y)\n)\n\n(define (sub x y) \n    (apply-generic 'sub x y)\n)\n\n(define (mul x y) \n    (apply-generic 'mul x y)\n)\n\n(define (div x y) \n    (apply-generic 'div x y)\n)\n\n\n(define (scheme-number->complex n)\n    (make-complex-from-real-imag (contents n) 0)\n)\n\n(install-scheme-number-package)\n(install-rational-package)\n(install-polar-package)\n(install-rectangular-package)\n(install-complex-package)\n\n\n\n(put-coercion 'scheme-number 'complex scheme-number->complex)\n\n(add (make-scheme-number 1) (make-complex-from-real-imag 1 2))",
			"file": "chapter2/2.5/generic-different-types.scm",
			"file_size": 10347,
			"file_write_time": 129867299137322379,
			"settings":
			{
				"buffer_size": 9885,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Scheme/Scheme.sublime-build",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"Snippet: ",
				"Snippet: if"
			],
			[
				"def",
				"Snippet: define-procedure"
			],
			[
				"sni",
				"Snippet: Method"
			],
			[
				"magic",
				"Snippet: __magic__"
			],
			[
				"",
				"Build: Build"
			]
		],
		"width": 392.0
	},
	"console":
	{
		"height": 166.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Alexey Grigorev/AppData/Roaming/Sublime Text 2/Packages/Scheme/Scheme.sublime-settings",
		"/C/Users/Alexey Grigorev/AppData/Roaming/Sublime Text 2/Packages/Scheme/Scheme.tmLanguage",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.2/combinations.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/other-stuff/1.scm",
		"/C/Users/Alexey Grigorev/AppData/Local/Temp/Rar$DIa0.680/Generator.java",
		"/C/Users/Alexey Grigorev/Dropbox/agrigor.droppages.com/Content/index.txt",
		"/C/Users/Alexey Grigorev/Dropbox/agrigor.droppages.com/Templates/index.html",
		"/C/cygwin/bin/pl",
		"/C/cygwin/bin/awk",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.2/typical-prog.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.2/comb.scm",
		"/C/Users/Alexey Grigorev/Downloads/soft/cygwin/http%3a%2f%2fmirror.mcs.anl.gov%2fcygwin%2f/setup.ini",
		"/C/Users/Alexey Grigorev/Desktop/1/russia_vk/russia_vk/pom.xml",
		"/C/Users/Alexey Grigorev/Desktop/1/russia_vk/russia_vk/vkontakte-integration-service/src/main/resources/ru/intech/tele2/vkintegration/vkintegration-context.xml",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.5/ex2.78.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.2/ex2.40.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.5/typical-prog.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.5/generic-op.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.2/ex2.34.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/4A/mattern-matching.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/4A/fig4.png",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.3/huffman-enc.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/4A/конспект.txt",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.3/deriv.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.3/1.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.3/sets-orderedlist.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.3/sets-tree.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.3/ex2.66.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.3/sets-unorderedlist.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.3/ex2.61.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.3/2.61.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.3/2.60.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.3/2.58.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.3/quotation.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/2.2/map.scm",
		"/C/Users/Alexey Grigorev/AppData/Roaming/Sublime Text 2/Packages/Scheme/Scheme.sublime-build",
		"/C/Users/Alexey Grigorev/AppData/Roaming/Sublime Text 2/Packages/User/1.sublime-macro",
		"/C/Users/Alexey Grigorev/AppData/Roaming/Sublime Text 2/Packages/Scheme/lambda.sublime-snippet",
		"/C/Users/Alexey Grigorev/AppData/Roaming/Sublime Text 2/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/Alexey Grigorev/AppData/Roaming/Sublime Text 2/Packages/Scheme/if.sublime-snippet",
		"/C/Users/Alexey Grigorev/AppData/Roaming/Sublime Text 2/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/ex2.38.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/ex2.36.scm",
		"/C/Users/Alexey Grigorev/Desktop/jtalks.tech.session.locking.chat",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/conv-interfaces.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/ex2.28.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/ex2.29.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/trees.scm",
		"/C/Users/ALEXEY~1/AppData/Local/Temp/Rar$DRa0.601/лаб 7/LAB7-1.PRO",
		"/C/Users/ALEXEY~1/AppData/Local/Temp/Rar$DRa0.057/лаб 6/LAB6-2.PRO",
		"/C/Users/ALEXEY~1/AppData/Local/Temp/Rar$DRa0.787/лаб 6/LAB6-1.PRO",
		"/C/Users/Alexey Grigorev/AppData/Local/Temp/Rar$DIa0.177/LAB5-2.PRO",
		"/C/Users/Alexey Grigorev/AppData/Local/Temp/Rar$DIa0.688/LAB5-1.PRO",
		"/C/Users/Alexey Grigorev/AppData/Local/Temp/Rar$DIa0.034/LAB5-1.PRO",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/lists.scm",
		"/C/Users/Alexey Grigorev/AppData/Local/Temp/Rar$DIa0.210/lab4.CLP",
		"/C/Users/Alexey Grigorev/AppData/Local/Temp/Rar$DIa0.840/лаб 1 граф.bls",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/map.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/pairs.scm",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/ex2.19.scm",
		"/C/Users/Alexey Grigorev/AppData/Roaming/Sublime Text 2/Packages/User/Default (Windows).sublime-keymap",
		"/C/Users/Alexey Grigorev/AppData/Roaming/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/C/Users/Alexey Grigorev/AppData/Roaming/Sublime Text 2/Packages/Scheme/Miscellaneous.tmPreferences",
		"/C/Users/Alexey Grigorev/Documents/sublime/sicp/chapter2/rational.scm",
		"/C/Users/Alexey Grigorev/AppData/Roaming/Sublime Text 2/Packages/Scheme/Comments.tmPreferences",
		"/C/Users/Alexey Grigorev/AppData/Roaming/Sublime Text 2/Packages/Python/Python.tmLanguage"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"C:\\Users\\Alexey Grigorev\\Documents\\sublime\\sicp\\chapter2\\2.2"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"m",
			"lst",
			"params",
			"cur",
			"C3",
			" ",
			"(A       2), (NA      16), (BOOM    1), (SHA     3), (GET     2), (YIP     9), (JOB     2), (WAH     1 ),",
			" ",
			"node",
			"leafs",
			"sample-message",
			"x",
			"union-set-merge",
			"union-set",
			"intersection-set-list",
			"intersection-set",
			"intersection-set-list",
			" \\n",
			"tree",
			"x2",
			"x1",
			"union",
			"b",
			"a",
			"after",
			"before",
			"expression?",
			"e",
			"after",
			"symbol",
			"before",
			"aft",
			"prev",
			"seq",
			"item",
			"memq",
			"seq",
			"split",
			"a2",
			"a1",
			"tail",
			"exp",
			"param",
			"variable?",
			"multiplicand",
			"deriv",
			"accumulate",
			" + ",
			".+",
			"\\s+",
			"b",
			"a",
			"struncture",
			"branch",
			"fringe",
			"list-to-fringe",
			"flattern",
			"items",
			"y",
			"x",
			" )",
			"(define (cc amount coins)\n        (cond \n            (?null 0)\n            (else \n                (+  (cc amount (cdr coins))\n                    (cc (- amount ((list-ref coins (- (length coins) 1))))\n                        (car coins)\n                    )\n                )\n            )\n        )\n    )",
			"items",
			"count-change-list",
			"function",
			"=",
			"((= ",
			"change",
			"first-denomination",
			"evends",
			"get",
			"param",
			"f",
			"func",
			"f",
			"n",
			"two",
			"one",
			"inc",
			"n",
			"x",
			"p",
			"q",
			"p",
			"z",
			"builder",
			"m",
			"pair",
			"second",
			"first",
			"pair",
			"denum",
			"d",
			"n",
			"d",
			"n",
			"\n;",
			"demon",
			"time",
			"n",
			"m",
			")",
			"rec",
			"lisp",
			"module1",
			"Module1",
			"module1",
			"p",
			"):;\n",
			"def",
			"et",
			"labore",
			"ut",
			"sed",
			"\\s+",
			"i",
			"for",
			"lambda",
			"print",
			"plus",
			"molestiae",
			"vel",
			"sit",
			"error",
			"rem",
			"laudantium",
			"non",
			"quasi"
		],
		"highlight": true,
		"in_selection": true,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"."
		],
		"reverse": true,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "chapter2/2.5/generic-different-types.scm",
					"settings":
					{
						"buffer_size": 9885,
						"regions":
						{
						},
						"selection":
						[
							[
								7529,
								7529
							]
						],
						"settings":
						{
							"syntax": "Packages/Scheme/Scheme.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 852.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 164.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true
}
